---
import { Icon } from "astro-icon/components";

const seasonalItems = [
  {
    icon: "mdi:snowflake",
    title: "Cool Cooking Tools",
    description: "Stay cool in small kitchens",
    color: "blue"
  },
  {
    icon: "mdi:fridge",
    title: "Smart Storage",
    description: "Maximize your space",
    color: "green"
  },
  {
    icon: "mdi:blender",
    title: "Compact Appliances",
    description: "Perfect for tiny counters",
    color: "purple"
  },
  {
    icon: "mdi:silverware",
    title: "Space-Saving Sets",
    description: "All-in-one solutions",
    color: "orange"
  },
  {
    icon: "mdi:pot-steam",
    title: "Multi-Use Tools",
    description: "Do more with less",
    color: "red"
  }
];
---

<section class="py-12 sm:py-20 bg-muted/20 overflow-hidden" aria-labelledby="tiny-kitchen-seasonal-carousel">
  <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between mb-8">
      <h2 class="text-3xl font-bold text-accent">Summer Space Savers</h2>
      <div class="flex gap-4">
        <button id="prev-btn" class="p-2 hover:bg-primary/10 rounded-full transition-colors" aria-label="Previous items">
          <Icon name="mdi:chevron-left" class="w-6 h-6" />
        </button>
        <button id="next-btn" class="p-2 hover:bg-primary/10 rounded-full transition-colors" aria-label="Next items">
          <Icon name="mdi:chevron-right" class="w-6 h-6" />
        </button>
      </div>
    </div>

    <div class="relative">
      <div id="carousel-container" class="overflow-hidden">
        <div id="carousel-track" class="flex transition-transform duration-300 ease-in-out gap-6">
          {seasonalItems.map((item) => (
            <div class="flex-none w-full sm:w-1/2 md:w-1/4">
              <div class="border border-border p-4 rounded-xl hover:shadow-lg transition bg-card">
                <div class={`bg-${item.color}-50 p-4 rounded-lg mb-4`}>
                  <Icon name={item.icon} class={`w-12 h-12 text-${item.color}-600`} />
                </div>
                <h3 class="font-semibold mb-2">{item.title}</h3>
                <p class="text-muted-foreground text-sm mb-4">{item.description}</p>
                <a href={`/category/${item.title.toLowerCase().replace(/\s+/g, '-')}`} class="text-primary font-medium hover:text-primary/80 transition-colors">
                  Shop Now â†’
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  class Carousel {
    constructor() {
      this.currentIndex = 0;
      this.track = document.getElementById('carousel-track');
      this.items = this.track.children;
      this.totalItems = this.items.length;
      this.itemsPerView = window.innerWidth < 768 ? 1 : 4;

      this.prevBtn = document.getElementById('prev-btn');
      this.nextBtn = document.getElementById('next-btn');

      this.init();
    }

    init() {
      this.updateButtons();
      this.addEventListeners();
      this.setupResponsive();
    }

    updateButtons() {
      this.prevBtn.disabled = this.currentIndex === 0;
      this.nextBtn.disabled = this.currentIndex >= this.totalItems - this.itemsPerView;

      this.prevBtn.style.opacity = this.prevBtn.disabled ? '0.5' : '1';
      this.nextBtn.style.opacity = this.nextBtn.disabled ? '0.5' : '1';
    }

    slide(direction) {
      if (direction === 'next' && this.currentIndex < this.totalItems - this.itemsPerView) {
        this.currentIndex++;
      } else if (direction === 'prev' && this.currentIndex > 0) {
        this.currentIndex--;
      }

      const offset = -(this.currentIndex * (100 / this.itemsPerView));
      this.track.style.transform = `translateX(${offset}%)`;
      this.updateButtons();
    }

    addEventListeners() {
      this.prevBtn.addEventListener('click', () => this.slide('prev'));
      this.nextBtn.addEventListener('click', () => this.slide('next'));
    }

    setupResponsive() {
      window.addEventListener('resize', () => {
        this.itemsPerView = window.innerWidth < 768 ? 1 : 4;
        this.currentIndex = Math.min(this.currentIndex, this.totalItems - this.itemsPerView);
        this.slide('current');
      });
    }
  }

  // Initialize carousel when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new Carousel();
  });
</script>