---
// Breadcrumbs
// ------------
// Description: Breadcrumbs consist of a list of links that help a user visualize a page's location within the hierarchical structure of a website, and allow navigation up to any of its "ancestors".
// Properties:
// - Classes: additional classes

import { Icon } from 'astro-icon/components';

// URL Parsing and breadcrumb generation
const url = new URL(Astro.request.url);
const pathname = url.pathname;
const segments = pathname.split('/').filter(Boolean);

// Add 'Blog' before the current path segments
const breadcrumbs = ['Home'];



// Extract dynamic tag from frontmatter
const { tags } = Astro.props; // Ensure tags is passed as a prop from the frontmatter



// Dynamically add segments based on URL structure
if (segments.length > 0) {
    // Handle blog section
    if (segments[0] === 'blog') {
        breadcrumbs.push('Blog');

        // Add tag if present in props
        if (tags && tags.length > 0) {
            breadcrumbs.push(tags[0]);
        }

        // Add remaining segments except 'blog'
        segments.slice(1).forEach(segment => {
            if (!breadcrumbs.includes(segment)) {
                breadcrumbs.push(segment);
            }
        });
    } else {
        // For non-blog pages, add all segments
        segments.forEach(segment => {
            if (!breadcrumbs.includes(segment)) {
                breadcrumbs.push(segment);
            }
        });
    }
}
// Check if tags exist and add the first one if available


// Add current URL segment(s)


// Props
type Props = {
    classes?: string;
    tags?: string[]; // Add type for tags if not already defined
};
const { classes } = Astro.props;
---

<nav aria-label="Breadcrumb" class:list={['breadcrumbs', { [`${classes}`]: classes }]} itemscope itemtype="http://schema.org/BreadcrumbList" itemid=`${Astro.request.url}#rich-snippet`,>
    <ol class="breadcrumbs__list">
        {breadcrumbs.map((segment, index) => {
    const isTag = tags?.includes(segment);
    const isLast = index === breadcrumbs.length - 1;
    const href = segment === 'Home'
        ? '/'
        : segment === 'Blog'
            ? '/blog'
            : isTag
                ? `/blog/tag/${segment}`
                : `/${segments.slice(0, segments.indexOf(segment) + 1).join('/')}`;

    return (
                <li class:list={[
                    "breadcrumbs__list-item",
                    { "mobile-visible": index === 0 || isLast }
                ]} itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                    <a href={href} class:list={[
                        "breadcrumbs__item-link",
                        { "is-current": isLast }
                    ]} itemprop="item">
                        <span itemprop="name" class="breadcrumb-text">
                            {index === 0 ? segment : segment.replace(/-/g, ' ')}
                        </span>
                    </a>
                    <meta itemprop="position" content={(index + 1).toString()} />
                    <meta itemprop="item" content={href} />
                    {index < breadcrumbs.length - 1 && (
                        <Icon name="chevron-left" class="breadcrumbs__item-icon" />
                    )}
                </li>
            );
        })}
    </ol>
</nav>

<style>
    .breadcrumbs {
        @apply w-full overflow-x-auto inline-flex rounded border border-neutral-200 bg-teal-200 px-3 sm:px-4 py-2 text-sm text-neutral-900 dark:border-neutral-200 dark:bg-teal-50 dark:text-neutral-900;
        /* Hide scrollbar */
        -ms-overflow-style: none;  /* IE and Edge */
        scrollbar-width: none;  /* Firefox */
        &::-webkit-scrollbar {
            display: none; /* Chrome, Safari and Opera */
        }
    }
    .breadcrumbs__list {
        @apply inline-flex items-center min-w-0 flex-nowrap;
    }
    .breadcrumbs__list-item {
        @apply flex items-center gap-1 sm:gap-2 min-w-0;
        /* Show only first and last items on mobile */
        @apply hidden;
    }
    .breadcrumbs__list-item.mobile-visible {
        @apply flex;
    }
    /* Show all items on larger screens */
    @screen md {
        .breadcrumbs__list-item {
            @apply flex;
        }
    }
    .breadcrumbs__item-link {
        @apply flex items-center gap-1 truncate whitespace-nowrap capitalize text-neutral-700 transition-colors hover:text-teal-500 dark:text-neutral-500 min-w-0;
    }
    .breadcrumbs__item-link.is-current {
        @apply pointer-events-none text-teal-700;
    }
    .breadcrumb-text {
        @apply truncate max-w-[100px] sm:max-w-[150px] md:max-w-[200px];
    }
    .breadcrumbs__item-icon {
        @apply h-3 w-3 sm:h-4 sm:w-4 flex-none text-neutral-700 transition-transform md:rotate-180 dark:text-teal-900;
    }
</style>